AWSTemplateFormatVersion: '2010-09-09'
Description: Lex 
Parameters:
  NamePrefix:
    Default: NBA
    Type: String

  AssetsBucketName:
    Type: String
    Default: "nba.assets"

  WebsiteBucketName:
    Type: String
    Default: "nba.website"

  GitHubRepo:
    Type: String
    Default: "NBA2021"

  GitHubUser:
    Type: String
    Default: "jojotenya"

  GitHubBackendBranch:
    Type: String
    Default: "backend"

Resources:
  GitHubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: NBA 
      ProviderType: GitHub 
      Tags:
        - Key: Project
          Value: ProjectB

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AssetsBucketName
    DeletionPolicy: Delete

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Delete

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: client-code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:aws:s3:::${AssetsBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
              - Resource: "*"
                Effect: Allow
                Action:
                - ssm:GetParameters
                - lex:*

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${AssetsBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
                  - lambda:*
                  - codestar-connections:UseConnection
                  - codestar-connections:GetConnection
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack

  WebBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            build:
              commands:
                - cd backend
                - python lex-manager.py -i bot-definition.json 
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub ${AWS::StackName}
      ServiceRole: !Ref CodeBuildServiceRole

  WebPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Sub "${GitHubUser}/${GitHubRepo}"
                BranchName: !Ref GitHubBackendBranch
              OutputArtifacts:
                - Name: App
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: WebBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1 
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref WebBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: WebBuildStep
              RunOrder: 1
