AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Serverless Frontend CI/CD
Parameters:

  AssetsBucketName:
    Type: String
    Default: "nba.assets"

  WebsiteBucketName:
    Type: String
    Default: "nba.website"

  GitHubRepo:
    Type: String
    Default: "NBA2021"

  GitHubUser:
    Type: String
    Default: "jojotenya"

  GitHubBackendranch:
    Type: String
    Default: "backend"

  GitHubFrontendBranch:
    Type: String
    Default: "frontend"

  LambdaOut:
    Type: String
    Default: "LambdaOut.yaml"

  LambdaCFStackName:
    Type: String
    Default: "NBALambda"

  ESDomainName:
    Type: "String"
    AllowedPattern: "^[a-z0-9-]+$"
    Default: "coms6998nba"

  ElasticsearchVersion:
    Type: "String"
    Default: "7.9"

  CloudFormationRoleARN:
    Type: String
    Default: "arn:aws:iam::082676057290:role/hw3-cloudformation"

  AlarmEmail: 
    Default: "tc3075@columbia.edu"
    Description: "Email address to notify of operational issues"
    Type: "String"

Resources:
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Ref "ESDomainName"
      ElasticsearchVersion: !Ref "ElasticsearchVersion"
      ElasticsearchClusterConfig:
        InstanceCount: "1"
        InstanceType: "t2.small.elasticsearch"
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: "10" 
        VolumeType: "standard"
        #VolumeType: "gp2"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS: '*'
            Action: "es:*"
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:es:'
                  - !Ref "AWS::Region"
                  - ':'
                  - !Ref "AWS::AccountId"
                  - ':domain/'
                  - !Ref "ESDomainName"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AssetsBucketName
    DeletionPolicy: Delete

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Delete

  GitHubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: NBA 
      ProviderType: GitHub 
      Tags:
        - Key: Project
          Value: ProjectB
  NBAQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: "NBAQueue"

  #AlarmTopic: 
  #  Type: AWS::SNS::Topic
  #  Properties: 
  #    Subscription: 
  #      - 
  #        Endpoint: 
  #          Ref: "AlarmEmail"
  #        Protocol: "email"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: client-code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:aws:s3:::${AssetsBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
              - Resource: "*"
                Effect: Allow
                Action:
                - ssm:GetParameters

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${AssetsBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}/*
                  - !Sub arn:aws:s3:::${WebsiteBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
                  - lambda:*
                  - codestar-connections:UseConnection
                  - codestar-connections:GetConnection
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack

  WebBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.2
          env:
            variables:
              WebsiteBucketName: "nba.website" 
          phases:
            build:
              commands:
                - aws s3 cp ./frontend s3://$WebsiteBucketName --recursive --debug 
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_WEB_BUCKET
            Value: !Ref WebsiteBucket
      Name: !Sub ${AWS::StackName}-T1-Web
      ServiceRole: !Ref CodeBuildServiceRole

  WebPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Sub "${GitHubUser}/${GitHubRepo}"
                BranchName: !Ref GitHubFrontendBranch
              OutputArtifacts:
                - Name: App
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: WebBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1 
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref WebBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: WebBuildStep
              RunOrder: 1

  LambdaBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.2
          env:
            variables:
              LambdaTemplate: "Lambda.yaml"
              LambdaOut: "LambdaOut.yaml"
              AssetsBucketName: "nba.assets" 
          phases:
            build:
              commands:
                - aws cloudformation package --template-file $LambdaTemplate --s3-bucket $AssetsBucketName --output-template-file $LambdaOut --debug
          artifacts:
            files: $LambdaOut
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub ${AWS::StackName}-T1
      ServiceRole: !Ref CodeBuildServiceRole

  LambdaPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Sub "${GitHubUser}/${GitHubRepo}"
                BranchName: !Ref GitHubBackendranch
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: LambdaBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref LambdaBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: LambdaBuildStep
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateUpdateSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              RunOrder: 2 
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: pipeline-changeset
                RoleArn: !Ref CloudFormationRoleARN
                StackName: !Ref LambdaCFStackName 
                TemplatePath: !Sub "LambdaBuildStep::${LambdaOut}"
              OutputArtifacts: []
              InputArtifacts:
                - Name: LambdaBuildStep

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - WebsiteBucket
      - WebsiteURL
    Description: URL for website hosted on S3

  GitHubConnectionStatus:
    Value: !GetAtt
      - GitHubConnection
      - ConnectionStatus

  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WebsiteBucket
          - DomainName
    Description: Name of S3 bucket to hold website content

  WebsiteBucketARN:
    Description: Arn of S3 bucket to hold website content
    Value: 
      Fn::GetAtt: 
        - "WebsiteBucket"
        - "Arn"
    Export:
      Name: "WebsiteBucketArn" 

  NBAQueueURL: 
    Description: "URL of new Amazon SQS Queue"
    Value: 
      Ref: "NBAQueue"

  NBAQueueARN: 
    Description: "ARN of new AmazonSQS Queue"
    Value: 
      Fn::GetAtt: 
        - "NBAQueue"
        - "Arn"
    Export:
      Name: "NBAQueueArn" 

  NBAQueueName: 
    Description: "Name of new Amazon SQS Queue"
    Value: 
      Fn::GetAtt: 
        - "NBAQueue"
        - "QueueName"
